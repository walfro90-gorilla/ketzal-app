generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Categories {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  image       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  price       Float
  stock       Int
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Review {
  id        Int      @id @default(autoincrement())
  serviceId Int
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  Service   Service  @relation(fields: [serviceId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Service {
  id                                             Int       @id @default(autoincrement())
  supplierId                                     Int
  name                                           String
  description                                    String?
  price                                          Float
  location                                       String?
  availableFrom                                  DateTime?
  availableTo                                    DateTime?
  createdAt                                      DateTime  @default(now())
  packs                                          Json?
  images                                         Json?
  ytLink                                         String?
  sizeTour                                       Float?
  serviceType                                    String?
  serviceCategory                                String?
  stateFrom                                      String?
  cityFrom                                       String?
  stateTo                                        String?
  cityTo                                         String?
  includes                                       Json?
  excludes                                       Json?
  faqs                                           Json?
  itinerary                                      Json?
  hotelProviderID                                Int?
  transportProviderID                            Int?
  dates                                          Json?
  Review                                         Review[]
  Supplier_Service_hotelProviderIDToSupplier     Supplier? @relation("Service_hotelProviderIDToSupplier", fields: [hotelProviderID], references: [id])
  Supplier_Service_supplierIdToSupplier          Supplier  @relation("Service_supplierIdToSupplier", fields: [supplierId], references: [id])
  Supplier_Service_transportProviderIDToSupplier Supplier? @relation("Service_transportProviderIDToSupplier", fields: [transportProviderID], references: [id])
}

model Supplier {
  id                                            Int       @id @default(autoincrement())
  name                                          String    @unique
  contactEmail                                  String    @unique
  phoneNumber                                   String?
  address                                       String?
  description                                   String?
  imgLogo                                       String?
  createdAt                                     DateTime  @default(now())
  supplierType                                  String?
  location                                      Json?
  photos                                        Json?
  extras                                        Json?
  info                                          Json?
  supplierSubType                               String?
  
  // Campos de aprobación y relación con User
  userId                                        String?
  isApproved                                    Boolean   @default(false)
  isPending                                     Boolean   @default(true)
  approvedAt                                    DateTime?
  approvedBy                                    String?
  rejectedAt                                    DateTime?
  rejectionReason                               String?
  
  // Relaciones
  User                                          User?     @relation("SupplierOwner", fields: [userId], references: [id])
  ApprovedBy                                    User?     @relation("SupplierApprover", fields: [approvedBy], references: [id])
  Service_Service_hotelProviderIDToSupplier     Service[] @relation("Service_hotelProviderIDToSupplier")
  Service_Service_supplierIdToSupplier          Service[] @relation("Service_supplierIdToSupplier")
  Service_Service_transportProviderIDToSupplier Service[] @relation("Service_transportProviderIDToSupplier")
  UserSuppliers                                 User[]    @relation("UserSupplier")
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String     @unique
  password         String?
  emailVerified    DateTime?
  image            String?
  role             Role       @default(user)
  status           UserStatus @default(PENDING_EMAIL_VERIFICATION)
  supplierId       Int?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Campos para solicitud de administrador (mantener por compatibilidad)
  adminRequest     Boolean?   @default(false)
  company          String?
  serviceType      String?
  city             String?
  documentation    String?
  rejectionReason  String?
  approvedAt       DateTime?
  rejectedAt       DateTime?
  approvedBy       String?
  
  // Relaciones
  Account          Account[]
  Review           Review[]
  Supplier         Supplier?  @relation("UserSupplier", fields: [supplierId], references: [id])
  OwnedSuppliers   Supplier[] @relation("SupplierOwner")
  ApprovedSuppliers Supplier[] @relation("SupplierApprover")
}

model VerificationToken {
  identifier String   @id @unique
  token      String
  expires    DateTime
}

model global_locations {
  id      Int    @id @default(autoincrement())
  country String
  state   String
  city    String
}

enum Role {
  user
  admin
  superadmin
}

enum UserStatus {
  PENDING_EMAIL_VERIFICATION
  ACTIVE
  PENDING_ADMIN_APPROVAL
  ADMIN_APPROVED
  ADMIN_REJECTED
  SUSPENDED
}

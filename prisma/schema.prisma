generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Categories {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  image       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  description    String?
  price          Float
  stock          Int
  image          String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  category       String?
  images         Json?
  priceAxo       Float?
  specifications Json?
  tags           Json?
  PlannerItem    PlannerItem[]
  WishlistItem   WishlistItem[]
}

model Review {
  id        Int      @id @default(autoincrement())
  serviceId Int
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  Service   Service  @relation(fields: [serviceId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model Service {
  id                                             Int            @id @default(autoincrement())
  supplierId                                     Int
  name                                           String
  description                                    String?
  price                                          Float
  location                                       String?
  availableFrom                                  DateTime?
  availableTo                                    DateTime?
  createdAt                                      DateTime       @default(now())
  packs                                          Json?
  images                                         Json?
  ytLink                                         String?
  sizeTour                                       Float?
  serviceType                                    String?
  serviceCategory                                String?
  stateFrom                                      String?
  cityFrom                                       String?
  stateTo                                        String?
  cityTo                                         String?
  includes                                       Json?
  excludes                                       Json?
  faqs                                           Json?
  itinerary                                      Json?
  transportProviderID                            Int?
  dates                                          Json?
  hotelProviderID                                Int?
  addOns                                         Json?
  currentBookings                                Int?           @default(0)
  maxCapacity                                    Int?
  priceAxo                                       Float?
  seasonalPrices                                 Json?
  PlannerItem                                    PlannerItem[]
  Review                                         Review[]
  Supplier_Service_hotelProviderIDToSupplier     Supplier?      @relation("Service_hotelProviderIDToSupplier", fields: [hotelProviderID], references: [id])
  Supplier_Service_supplierIdToSupplier          Supplier       @relation("Service_supplierIdToSupplier", fields: [supplierId], references: [id])
  Supplier_Service_transportProviderIDToSupplier Supplier?      @relation("Service_transportProviderIDToSupplier", fields: [transportProviderID], references: [id])
  WishlistItem                                   WishlistItem[]
}

model Supplier {
  id                                            Int       @id @default(autoincrement())
  name                                          String    @unique
  contactEmail                                  String    @unique
  phoneNumber                                   String?
  address                                       String?
  description                                   String?
  imgLogo                                       String?
  createdAt                                     DateTime  @default(now())
  supplierType                                  String?
  location                                      Json?
  photos                                        Json?
  extras                                        Json?
  info                                          Json?
  supplierSubType                               String?
  Service_Service_hotelProviderIDToSupplier     Service[] @relation("Service_hotelProviderIDToSupplier")
  Service_Service_supplierIdToSupplier          Service[] @relation("Service_supplierIdToSupplier")
  Service_Service_transportProviderIDToSupplier Service[] @relation("Service_transportProviderIDToSupplier")
  UserSuppliers                                 User[]    @relation("UserSupplier")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  role           Role            @default(admin)
  supplierId     Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  axoCoinsEarned Float?          @default(50)
  referralCode   String?
  Account        Account[]
  Payment        Payment[]
  Review         Review[]
  TravelPlanner  TravelPlanner[]
  Supplier       Supplier?       @relation("UserSupplier", fields: [supplierId], references: [id])
  Wallet         Wallet?
  Wishlist       Wishlist[]
  Notification   Notification[]
}

model VerificationToken {
  identifier String   @id @unique
  token      String
  expires    DateTime
}

model PasswordResetToken {
  identifier String   @id @unique
  token      String
  expires    DateTime
}

model global_locations {
  id      Int    @id @default(autoincrement())
  country String
  state   String
  city    String
}

model Payment {
  id                 String         @id
  plannerId          String?
  userId             String
  amountMXN          Float
  amountAxo          Float?
  status             PaymentStatus  @default(PENDING)
  installments       Int            @default(1)
  currentInstallment Int            @default(1)
  dueDate            DateTime?
  paidAt             DateTime?
  paymentMethod      String?
  transactionId      String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  TravelPlanner      TravelPlanner? @relation(fields: [plannerId], references: [id])
  User               User           @relation(fields: [userId], references: [id])
}

model PlannerItem {
  id            String        @id
  plannerId     String
  serviceId     Int?
  productId     Int?
  quantity      Int           @default(1)
  priceMXN      Float
  priceAxo      Float?
  selectedDate  DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  TravelPlanner TravelPlanner @relation(fields: [plannerId], references: [id], onDelete: Cascade)
  Product       Product?      @relation(fields: [productId], references: [id])
  Service       Service?      @relation(fields: [serviceId], references: [id])
}

model TravelPlanner {
  id          String        @id
  userId      String
  name        String
  destination String?
  startDate   DateTime?
  endDate     DateTime?
  status      PlannerStatus @default(PLANNING)
  totalMXN    Float         @default(0)
  totalAxo    Float         @default(0)
  isPublic    Boolean       @default(false)
  shareCode   String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Payment     Payment[]
  PlannerItem PlannerItem[]
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id                String              @id
  userId            String              @unique
  balanceMXN        Float               @default(0)
  balanceAxo        Float               @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  WalletTransaction WalletTransaction[]
}

model WalletTransaction {
  id          String                @id
  walletId    String
  type        WalletTransactionType
  amountMXN   Float?
  amountAxo   Float?
  description String
  reference   String?
  createdAt   DateTime              @default(now())
  Wallet      Wallet                @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id           String         @id
  userId       String
  name         String         @default("Mi Lista de Deseos")
  isPublic     Boolean        @default(false)
  shareCode    String?        @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  WishlistItem WishlistItem[]
}

model WishlistItem {
  id         String   @id
  wishlistId String
  serviceId  Int?
  productId  Int?
  priceAlert Float?
  createdAt  DateTime @default(now())
  Product    Product? @relation(fields: [productId], references: [id])
  Service    Service? @relation(fields: [serviceId], references: [id])
  Wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
}

enum Role {
  user
  admin
  superadmin
}

enum PaymentStatus {
  PENDING
  PARTIAL
  COMPLETED
  REFUNDED
}

enum PlannerStatus {
  PLANNING
  RESERVED
  CONFIRMED
  TRAVELLING
  COMPLETED
}

enum WalletTransactionType {
  DEPOSIT
  WITHDRAWAL
  PURCHASE
  REFUND
  TRANSFER_SENT
  TRANSFER_RECEIVED
  REWARD
}

enum UserStatus {
  PENDING_EMAIL_VERIFICATION
  ACTIVE
  PENDING_ADMIN_APPROVAL
  ADMIN_APPROVED
  ADMIN_REJECTED
  SUSPENDED
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean  @default(false)
  priority  NotificationPriority @default(NORMAL)
  metadata  Json?
  actionUrl String?
  createdAt DateTime @default(now())
  readAt    DateTime?

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId, isRead])
  @@index([createdAt])
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SUPPLIER_APPROVAL
  USER_REGISTRATION
  WELCOME_BONUS
  WELCOME_MESSAGE
  BOOKING_UPDATE
  SYSTEM_UPDATE
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

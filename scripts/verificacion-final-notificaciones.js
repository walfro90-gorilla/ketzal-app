// Script final de verificaci√≥n del sistema de notificaciones para usuarios
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verificacionFinalSistema() {
  try {
    console.log('üéØ VERIFICACI√ìN FINAL DEL SISTEMA DE NOTIFICACIONES PARA USUARIOS\n');
    
    // 1. Verificar super admin
    const superAdmin = await prisma.user.findFirst({
      where: { role: 'superadmin' }
    });
    
    if (!superAdmin) {
      console.log('‚ùå No se encontr√≥ super admin');
      return;
    }
    
    console.log(`üë§ Super Admin: ${superAdmin.email} (ID: ${superAdmin.id})`);
    
    // 2. Contar todos los tipos de notificaciones
    const stats = await prisma.notification.groupBy({
      by: ['type'],
      where: { userId: superAdmin.id },
      _count: { type: true }
    });
    
    console.log('\nüìä Estad√≠sticas por tipo de notificaci√≥n:');
    stats.forEach(stat => {
      console.log(`   ${stat.type}: ${stat._count.type} notificaciones`);
    });
    
    // 3. Verificar notificaciones recientes
    const notificacionesRecientes = await prisma.notification.findMany({
      where: { userId: superAdmin.id },
      orderBy: { createdAt: 'desc' },
      take: 5
    });
    
    console.log('\nüìã √öltimas 5 notificaciones:');
    notificacionesRecientes.forEach((notif, index) => {
      const emoji = notif.isRead ? '‚úÖ' : 'üî¥';
      const prioridad = notif.priority === 'HIGH' ? 'üî•' : notif.priority === 'NORMAL' ? 'üìù' : 'üìã';
      console.log(`   ${index + 1}. ${emoji} ${prioridad} ${notif.title}`);
      console.log(`      üìÖ ${notif.createdAt.toLocaleString()}`);
      console.log(`      üìù ${notif.message.substring(0, 80)}${notif.message.length > 80 ? '...' : ''}`);
      console.log(`      üè∑Ô∏è  ${notif.type} | Prioridad: ${notif.priority}`);
    });
    
    // 4. Verificar tipos disponibles
    const tiposDisponibles = await prisma.$queryRaw`
      SELECT unnest(enum_range(NULL::NotificationType)) as tipo;
    `;
    
    console.log('\nüé® Tipos de notificaci√≥n disponibles en la BD:');
    tiposDisponibles.forEach(tipo => {
      console.log(`   ‚Ä¢ ${tipo.tipo}`);
    });
    
    // 5. Resumen de funcionalidades implementadas
    console.log('\n‚úÖ FUNCIONALIDADES IMPLEMENTADAS:');
    console.log('   üéâ Notificaciones para registro de usuarios normales (Prioridad: NORMAL)');
    console.log('   üë§ Notificaciones para solicitudes de admin (Prioridad: HIGH)');
    console.log('   üè¢ Notificaciones para registro de proveedores (Prioridad: HIGH)');
    console.log('   üìß Metadata completa con informaci√≥n del usuario');
    console.log('   üîó URLs de acci√≥n para gesti√≥n');
    console.log('   üö´ Manejo de errores sin afectar el registro');
    
    console.log('\nüöÄ PR√ìXIMOS PASOS PARA PROBAR:');
    console.log('   1. Ir a http://localhost:3000/register para usuarios normales');
    console.log('   2. Ir a http://localhost:3000/register-admin para proveedores');
    console.log('   3. Verificar notificaciones en el panel de admin como super admin');
    
    // 6. Verificar usuarios y suppliers creados
    const totalUsuarios = await prisma.user.count();
    const totalProveedores = await prisma.supplier.count();
    
    console.log(`\nüìà Estado actual del sistema:`);
    console.log(`   üë• Total usuarios: ${totalUsuarios}`);
    console.log(`   üè¢ Total proveedores: ${totalProveedores}`);
    console.log(`   üìÆ Total notificaciones super admin: ${notificacionesRecientes.length > 0 ? await prisma.notification.count({ where: { userId: superAdmin.id } }) : 0}`);
    
    console.log('\nüéâ ¬°SISTEMA DE NOTIFICACIONES COMPLETAMENTE FUNCIONAL!');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verificacionFinalSistema();

// Test simple para el CRUD de notificaciones sin usar imports complejos
const BACKEND_URL = 'http://localhost:4000';

async function testNotificationsCRUDSimple() {
    console.log('üß™ INICIANDO PRUEBAS SIMPLES DEL CRUD DE NOTIFICACIONES\n');

    // Obtener un usuario real
    let testUserId = 'test-user';
    
    try {
        console.log('üîç 1. Obteniendo usuario de la base de datos...');
        const usersResponse = await fetch(`${BACKEND_URL}/api/users`);
        if (usersResponse.ok) {
            const users = await usersResponse.json();
            if (users && users.length > 0) {
                testUserId = users[0].id;
                console.log(`‚úÖ Usuario encontrado: ${users[0].name} (ID: ${testUserId})\n`);
            }
        }
    } catch (error) {
        console.log('‚ö†Ô∏è Error al obtener usuarios, usando ID gen√©rico\n');
    }

    let notificationId = null;

    try {
        // Test 1: CREATE notification
        console.log('üìù 2. CREANDO NOTIFICACI√ìN...');
        const createResponse = await fetch(`${BACKEND_URL}/api/notifications`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId: testUserId,
                title: 'Test Notification',
                message: 'Esta es una notificaci√≥n de prueba del CRUD',
                type: 'INFO',
                priority: 'NORMAL'
            })
        });

        if (createResponse.ok) {
            const created = await createResponse.json();
            notificationId = created.id;
            console.log(`‚úÖ Notificaci√≥n creada: ${created.title} (ID: ${created.id})\n`);
        } else {
            console.log(`‚ùå Error al crear: ${createResponse.status} ${createResponse.statusText}\n`);
        }

        // Test 2: GET all notifications
        console.log('üìã 3. OBTENIENDO TODAS LAS NOTIFICACIONES...');
        const getAllResponse = await fetch(`${BACKEND_URL}/api/notifications`);
        if (getAllResponse.ok) {
            const allNotifications = await getAllResponse.json();
            console.log(`‚úÖ Total de notificaciones: ${allNotifications.length}\n`);
        } else {
            console.log(`‚ùå Error al obtener todas: ${getAllResponse.status}\n`);
        }

        // Test 3: GET notification by ID
        if (notificationId) {
            console.log('üîç 4. OBTENIENDO NOTIFICACI√ìN POR ID...');
            const getOneResponse = await fetch(`${BACKEND_URL}/api/notifications/${notificationId}`);
            if (getOneResponse.ok) {
                const notification = await getOneResponse.json();
                console.log(`‚úÖ Notificaci√≥n encontrada: ${notification.title}\n`);
            } else {
                console.log(`‚ùå Error al obtener por ID: ${getOneResponse.status}\n`);
            }
        }

        // Test 4: GET user notifications
        console.log('üë§ 5. OBTENIENDO NOTIFICACIONES DEL USUARIO...');
        const getUserResponse = await fetch(`${BACKEND_URL}/api/notifications/user/${testUserId}`);
        if (getUserResponse.ok) {
            const userNotifications = await getUserResponse.json();
            console.log(`‚úÖ Notificaciones del usuario: ${userNotifications.length}\n`);
        } else {
            console.log(`‚ùå Error al obtener del usuario: ${getUserResponse.status}\n`);
        }

        // Test 5: GET notification stats
        console.log('üìä 6. OBTENIENDO ESTAD√çSTICAS...');
        const getStatsResponse = await fetch(`${BACKEND_URL}/api/notifications/user/${testUserId}/stats`);
        if (getStatsResponse.ok) {
            const stats = await getStatsResponse.json();
            console.log(`‚úÖ Estad√≠sticas - Total: ${stats.total}, No le√≠das: ${stats.unread}, Le√≠das: ${stats.read}\n`);
        } else {
            console.log(`‚ùå Error al obtener estad√≠sticas: ${getStatsResponse.status}\n`);
        }

        // Test 6: MARK as read
        if (notificationId) {
            console.log('üìñ 7. MARCANDO COMO LE√çDA...');
            const markReadResponse = await fetch(`${BACKEND_URL}/api/notifications/${notificationId}/mark-read`, {
                method: 'PATCH'
            });
            if (markReadResponse.ok) {
                const marked = await markReadResponse.json();
                console.log(`‚úÖ Marcada como le√≠da: ${marked.isRead}\n`);
            } else {
                console.log(`‚ùå Error al marcar como le√≠da: ${markReadResponse.status}\n`);
            }
        }

        // Test 7: UPDATE notification
        if (notificationId) {
            console.log('‚úèÔ∏è 8. ACTUALIZANDO NOTIFICACI√ìN...');
            const updateResponse = await fetch(`${BACKEND_URL}/api/notifications/${notificationId}`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    title: 'T√≠tulo Actualizado',
                    message: 'Mensaje actualizado por la prueba',
                    priority: 'HIGH'
                })
            });
            if (updateResponse.ok) {
                const updated = await updateResponse.json();
                console.log(`‚úÖ Notificaci√≥n actualizada: ${updated.title}\n`);
            } else {
                console.log(`‚ùå Error al actualizar: ${updateResponse.status}\n`);
            }
        }

        // Test 8: CREATE quick notification
        console.log('‚ö° 9. CREANDO NOTIFICACI√ìN R√ÅPIDA...');
        const quickResponse = await fetch(`${BACKEND_URL}/api/notifications/quick`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                userId: testUserId,
                title: 'Notificaci√≥n R√°pida',
                message: 'Esta es una notificaci√≥n r√°pida',
                type: 'SUCCESS'
            })
        });
        
        let quickNotificationId = null;
        if (quickResponse.ok) {
            const quick = await quickResponse.json();
            quickNotificationId = quick.id;
            console.log(`‚úÖ Notificaci√≥n r√°pida creada: ${quick.title}\n`);
        } else {
            console.log(`‚ùå Error al crear r√°pida: ${quickResponse.status}\n`);
        }

        // Test 9: MARK ALL as read
        console.log('üìö 10. MARCANDO TODAS COMO LE√çDAS...');
        const markAllResponse = await fetch(`${BACKEND_URL}/api/notifications/user/${testUserId}/mark-all-read`, {
            method: 'PATCH'
        });
        if (markAllResponse.ok) {
            console.log(`‚úÖ Todas marcadas como le√≠das\n`);
        } else {
            console.log(`‚ùå Error al marcar todas: ${markAllResponse.status}\n`);
        }

        // Test 10: DELETE notification
        if (quickNotificationId) {
            console.log('üóëÔ∏è 11. ELIMINANDO NOTIFICACI√ìN...');
            const deleteResponse = await fetch(`${BACKEND_URL}/api/notifications/${quickNotificationId}`, {
                method: 'DELETE'
            });
            if (deleteResponse.ok) {
                console.log(`‚úÖ Notificaci√≥n eliminada exitosamente\n`);
            } else {
                console.log(`‚ùå Error al eliminar: ${deleteResponse.status}\n`);
            }
        }

        // Final stats
        console.log('üìà 12. ESTAD√çSTICAS FINALES...');
        const finalStatsResponse = await fetch(`${BACKEND_URL}/api/notifications/user/${testUserId}/stats`);
        if (finalStatsResponse.ok) {
            const finalStats = await finalStatsResponse.json();
            console.log(`‚úÖ Estado final - Total: ${finalStats.total}, No le√≠das: ${finalStats.unread}, Le√≠das: ${finalStats.read}\n`);
        }

        console.log('üéâ ¬°TODAS LAS PRUEBAS COMPLETADAS!');
        console.log('\n‚úÖ FUNCIONES PROBADAS:');
        console.log('   ‚Ä¢ POST /api/notifications (CREATE)');
        console.log('   ‚Ä¢ GET /api/notifications (READ ALL)');
        console.log('   ‚Ä¢ GET /api/notifications/:id (READ ONE)');
        console.log('   ‚Ä¢ GET /api/notifications/user/:userId (READ BY USER)');
        console.log('   ‚Ä¢ GET /api/notifications/user/:userId/stats (STATS)');
        console.log('   ‚Ä¢ PATCH /api/notifications/:id/mark-read (MARK READ)');
        console.log('   ‚Ä¢ PATCH /api/notifications/:id (UPDATE)');
        console.log('   ‚Ä¢ POST /api/notifications/quick (QUICK CREATE)');
        console.log('   ‚Ä¢ PATCH /api/notifications/user/:userId/mark-all-read (MARK ALL READ)');
        console.log('   ‚Ä¢ DELETE /api/notifications/:id (DELETE)');

    } catch (error) {
        console.error('‚ùå ERROR GENERAL EN LAS PRUEBAS:');
        console.error('   ', error.message);
        console.log('\nüí° VERIFICAR:');
        console.log('   1. Backend corriendo en puerto 4000');
        console.log('   2. Base de datos conectada');
        console.log('   3. M√≥dulo de notifications registrado');
    }
}

// Auto-ejecutar
testNotificationsCRUDSimple().catch(console.error);

module.exports = { testNotificationsCRUDSimple };
